{"pageProps":{"note":{"id":"klfp5chhm7wv5lap5mgxb1n","title":"Auth Consent","desc":"","updated":1741045746195,"created":1741021896647,"custom":{},"fname":"SP.Preferences.Auth Consent","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"ddba1014bbd9e988eb96d383130e0639","links":[],"anchors":{"implementing-auth-consent-for-preferences":{"type":"header","text":"Implementing auth consent for preferences","value":"implementing-auth-consent-for-preferences","line":8,"column":0,"depth":1},"get-consent-status-flow":{"type":"header","text":"/GET Consent status flow","value":"get-consent-status-flow","line":10,"column":0,"depth":2},"post-preference-flow":{"type":"header","text":"/POST preference flow","value":"post-preference-flow","line":36,"column":0,"depth":2},"open-questions":{"type":"header","text":"Open Questions","value":"open-questions","line":39,"column":0,"depth":2}},"children":[],"parent":"p4fqn10jzymcwo4urykzqmy","data":{}},"body":"<h1 id=\"auth-consent\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#auth-consent\"></a>Auth Consent</h1>\n<h1 id=\"implementing-auth-consent-for-preferences\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#implementing-auth-consent-for-preferences\"></a>Implementing auth consent for preferences</h1>\n<h2 id=\"get-consent-status-flow\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#get-consent-status-flow\"></a>/GET Consent status flow</h2>\n<ul>\n<li>if valid <code>authId</code> present\n<ul>\n<li>if <code>uuidGenerated</code>\n<ul>\n<li>get <code>authMapping(uuid)</code> by <code>authId</code></li>\n<li>set the preference <code>uuid</code> value in local-storage.\n<ul>\n<li>If no authMapping\n<ul>\n<li>we don't neede to call get user consent.</li>\n</ul>\n</li>\n<li>Else if authMapping \n<ul>\n<li>get the user consent for this  <code>uuid</code> since it might have changed on another device.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>else if a <code>uuid</code> was passed and it <em>wasn't</em> generated\n<ul>\n<li>get <code>authMapping(uuid)</code> by <code>authId</code>\n<ul>\n<li>if <em>no</em> <code>authMapping</code> exists for this <code>authId</code>, \n<ul>\n<li>then <em>create</em> the <code>authMapping</code> record to store this new mapping between the <code>authId</code> and the <code>uuid</code>.</li>\n<li>get the user consent for this <code>uuid</code> since it might have changed on some other device.</li>\n</ul>\n</li>\n<li>else if <code>authMapping</code> exists \n<ul>\n<li>if <code>linkedUuid</code> is the same\n<ul>\n<li>if <code>localData</code> is current then short circuit</li>\n<li>else if <code>localData</code> is <em>not</em> current. <em>Does this happen through the VL?</em>\n<ul>\n<li>get the user consent for this <code>uuid</code> since it might have changed on some other device.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>else if <code>linkedUuid</code> is <em>not</em> the same\n<ul>\n<li>get the user consent for this new <code>uuid</code> since it might have changed on another device. We use the linked UUID to fetch the consent data since that is the latest uuid that might have newer changes.</li>\n<li>set the preference <code>uuid</code> value in local-storage</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>else\n<ul>\n<li>Nothing to do.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"post-preference-flow\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#post-preference-flow\"></a>/POST preference flow</h2>\n<ul>\n<li>if valid <code>authId</code> and <code>uuid</code> present, then create <code>user preference</code> and <code>authMapping</code>.O</li>\n</ul>\n<h2 id=\"open-questions\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#open-questions\"></a>Open Questions</h2>\n<ul>\n<li>Why are we checking to see if the uuids are the same for the short circuit?</li>\n</ul>","noteIndex":{"id":"root","title":"root","desc":"","updated":1746040151076,"created":1595961348801,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":".","selfContained":true,"name":"Dendron"},"contentHash":"3338f3f44ea53fff248fd70b6ad85170","links":[],"anchors":{},"children":["oz8e6a05bjgd3cbtru3hqe2","c1bs7wsjfbhb0zipaywqv1","3x4fmd16chquma6kovvfatj","gdjyzsq56qgyj5t5uktrsgu","69h59jt3vyfdg55g7gqc95d","wz9z8az9m9aq5132p7d10co","l1lcmphk4ubvu1aiqhcs7ib","bd3mupfj68nrgnjejss1qqh","1tlnuf6o2f3qawzg799ilzk","z5mfdumpr0cv3ceh60flq8n","filwymswyiwdojrwinvy5xd"],"parent":null,"data":{},"body":"\nSiddharth's root\n\nThis vault contains all the verticals to climb."},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true,"enableSelfContainedVaults":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":true,"vaultSelectionModeOnCreate":"smart","leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2}},"randomNote":{},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":".","selfContained":true,"name":"Dendron"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"task":{"name":"task","dateFormat":"y.MM.dd","addBehavior":"asOwnDomain","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"taskCompleteStatus":["done","x"],"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"enableUserTags":true,"enableHashTags":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"enableEditorDecorations":true,"maxPreviewsCached":10,"maxNoteLength":204800,"enableFullHierarchyNoteTitle":false,"enablePersistentHistory":false,"enableHandlebarTemplates":true,"enableSmartRefs":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableMermaid":true},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"copyAssets":true,"siteHierarchies":["root"],"writeStubs":false,"siteRootDir":"docs","seo":{"title":"Dendron","description":"Personal Knowledge Space"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enableSiteLastModified":true,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"enableTaskNotes":true,"enablePrettyLinks":true,"searchMode":"search","siteUrl":"https://sid1081.github.io","assetsPrefix":"/dendron-main","enableMermaid":true,"siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}